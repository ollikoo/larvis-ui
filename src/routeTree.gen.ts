/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/~__root'
import { Route as SecureRouteImport } from './routes/~_secure/~route'
import { Route as PublicRouteImport } from './routes/~_public/~route'
import { Route as IndexImport } from './routes/~index'
import { Route as SecureUsersUserIdImport } from './routes/~_secure/~users/~$userId'
import { Route as SecureUsersIndexImport } from './routes/~_secure/~users/~index'
import { Route as SecureDashboardIndexImport } from './routes/~_secure/~dashboard/~index'
import { Route as PublicLoginIndexImport } from './routes/~_public/~login/~index'

// Create/Update Routes

const SecureRouteRoute = SecureRouteImport.update({
  id: '/_secure',
  getParentRoute: () => rootRoute,
} as any)

const PublicRouteRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SecureUsersUserIdRoute = SecureUsersUserIdImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => SecureRouteRoute,
} as any).lazy(() =>
  import('./routes/~_secure/~users/~$userId.lazy').then((d) => d.Route),
)

const SecureUsersIndexRoute = SecureUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => SecureRouteRoute,
} as any).lazy(() =>
  import('./routes/~_secure/~users/~index.lazy').then((d) => d.Route),
)

const SecureDashboardIndexRoute = SecureDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => SecureRouteRoute,
} as any).lazy(() =>
  import('./routes/~_secure/~dashboard/~index.lazy').then((d) => d.Route),
)

const PublicLoginIndexRoute = PublicLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => PublicRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRoute
    }
    '/_secure': {
      id: '/_secure'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SecureRouteImport
      parentRoute: typeof rootRoute
    }
    '/_public/login/': {
      id: '/_public/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginIndexImport
      parentRoute: typeof PublicRouteImport
    }
    '/_secure/dashboard/': {
      id: '/_secure/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof SecureDashboardIndexImport
      parentRoute: typeof SecureRouteImport
    }
    '/_secure/users/': {
      id: '/_secure/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof SecureUsersIndexImport
      parentRoute: typeof SecureRouteImport
    }
    '/_secure/users/$userId': {
      id: '/_secure/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof SecureUsersUserIdImport
      parentRoute: typeof SecureRouteImport
    }
  }
}

// Create and export the route tree

interface PublicRouteRouteChildren {
  PublicLoginIndexRoute: typeof PublicLoginIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicLoginIndexRoute: PublicLoginIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

interface SecureRouteRouteChildren {
  SecureDashboardIndexRoute: typeof SecureDashboardIndexRoute
  SecureUsersIndexRoute: typeof SecureUsersIndexRoute
  SecureUsersUserIdRoute: typeof SecureUsersUserIdRoute
}

const SecureRouteRouteChildren: SecureRouteRouteChildren = {
  SecureDashboardIndexRoute: SecureDashboardIndexRoute,
  SecureUsersIndexRoute: SecureUsersIndexRoute,
  SecureUsersUserIdRoute: SecureUsersUserIdRoute,
}

const SecureRouteRouteWithChildren = SecureRouteRoute._addFileChildren(
  SecureRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof SecureRouteRouteWithChildren
  '/login': typeof PublicLoginIndexRoute
  '/dashboard': typeof SecureDashboardIndexRoute
  '/users': typeof SecureUsersIndexRoute
  '/users/$userId': typeof SecureUsersUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof SecureRouteRouteWithChildren
  '/login': typeof PublicLoginIndexRoute
  '/dashboard': typeof SecureDashboardIndexRoute
  '/users': typeof SecureUsersIndexRoute
  '/users/$userId': typeof SecureUsersUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_public': typeof PublicRouteRouteWithChildren
  '/_secure': typeof SecureRouteRouteWithChildren
  '/_public/login/': typeof PublicLoginIndexRoute
  '/_secure/dashboard/': typeof SecureDashboardIndexRoute
  '/_secure/users/': typeof SecureUsersIndexRoute
  '/_secure/users/$userId': typeof SecureUsersUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/dashboard' | '/users' | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/dashboard' | '/users' | '/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/_public'
    | '/_secure'
    | '/_public/login/'
    | '/_secure/dashboard/'
    | '/_secure/users/'
    | '/_secure/users/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  SecureRouteRoute: typeof SecureRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PublicRouteRoute: PublicRouteRouteWithChildren,
  SecureRouteRoute: SecureRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/_public",
        "/_secure"
      ]
    },
    "/": {
      "filePath": "~index.tsx"
    },
    "/_public": {
      "filePath": "~_public/~route.tsx",
      "children": [
        "/_public/login/"
      ]
    },
    "/_secure": {
      "filePath": "~_secure/~route.tsx",
      "children": [
        "/_secure/dashboard/",
        "/_secure/users/",
        "/_secure/users/$userId"
      ]
    },
    "/_public/login/": {
      "filePath": "~_public/~login/~index.tsx",
      "parent": "/_public"
    },
    "/_secure/dashboard/": {
      "filePath": "~_secure/~dashboard/~index.tsx",
      "parent": "/_secure"
    },
    "/_secure/users/": {
      "filePath": "~_secure/~users/~index.tsx",
      "parent": "/_secure"
    },
    "/_secure/users/$userId": {
      "filePath": "~_secure/~users/~$userId.tsx",
      "parent": "/_secure"
    }
  }
}
ROUTE_MANIFEST_END */
